basePath: /api
definitions:
  admin.EmailInput:
    properties:
      email:
        type: string
    type: object
  profile.Profile:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
      username:
        type: string
    type: object
  quote.Quote:
    properties:
      approved:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      quote:
        type: string
      user_id:
        type: string
    type: object
  quote.QuoteRequest:
    properties:
      quote:
        type: string
    type: object
  quote.QuoteUpdateRequest:
    properties:
      id:
        type: string
      quote:
        type: string
    type: object
host: localhost:8082
info:
  contact: {}
  description: A server for a simple Go application
  title: FireGo
paths:
  /admin/make:
    post:
      consumes:
      - application/json
      description: This endpoint allows an admin to promote a user to an admin role.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The email of the user to be promoted to admin.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/admin.EmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{\"message\":\"User example@example.com is now an admin\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"error validating email: invalid format\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"error making admin:\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Make user admin
      tags:
      - Admin
  /admin/profile:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the profile information for all users.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A list of all user profiles.
          schema:
            items:
              $ref: '#/definitions/profile.Profile'
            type: array
        "404":
          description: '{"error":"No profiles found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to retrieve profiles"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all user profiles
      tags:
      - Admin
  /admin/quote/approve/{id}:
    post:
      consumes:
      - application/json
      description: Approve a quote by ID
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Quote ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Quote approved successfully
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Quote not found
          schema:
            type: string
        "500":
          description: Failed to approve quote
          schema:
            type: string
      summary: Approve quote
      tags:
      - admin
  /admin/quote/unapproved:
    get:
      consumes:
      - application/json
      description: Get all unapproved quotes
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of unapproved quotes
          schema:
            items:
              $ref: '#/definitions/quote.Quote'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: No unapproved quotes found
          schema:
            type: string
        "500":
          description: Failed to get unapproved quotes
          schema:
            type: string
      summary: Get unapproved quotes
      tags:
      - admin
  /admin/remove:
    delete:
      consumes:
      - application/json
      description: This endpoint allows an admin to revoke admin rights from a user.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The email of the user to have admin rights revoked.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/admin.EmailInput'
      produces:
      - application/json
      responses:
        "200":
          description: '{\"message\":\"User example@example.com admin rights have
            been revoked\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"error validating email: invalid format\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"error removing admin rights:\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove user admin rights
      tags:
      - Admin
  /profile/{id}:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves the profile information for a specific
        user.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The ID of the user whose profile is to be retrieved.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The user's profile information.
          schema:
            $ref: '#/definitions/profile.Profile'
        "404":
          description: '{"error":"Profile not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error":"Failed to retrieve profile"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user profile
      tags:
      - User
  /profile/create:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to create their profile.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: '{\"message\":\"Profile created successfully\", \"user_email\":\"example@example.com\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"Profile already exists\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{\"error\":\"Unauthorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"Failed to create profile\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create user profile
      tags:
      - Profile
  /profile/delete/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows a user to delete their profile. Admins can
        delete any profile.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The ID of the user whose profile is to be deleted.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{\"message\":\"Profile deleted successfully\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{\"error\":\"Unauthorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: '{\"error\":\"not authorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{\"error\":\"Profile not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"Failed to delete profile\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user profile
      tags:
      - Profile
  /profile/update:
    put:
      consumes:
      - application/json
      description: This endpoint allows a user to update their profile information.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The new bio for the user.
        in: body
        name: bio
        schema:
          type: string
      - description: The new username for the user.
        in: body
        name: username
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{\"message\":\"Profile updated successfully\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"Invalid request body\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{\"error\":\"Unauthorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{\"error\":\"Profile not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"Failed to update profile\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update user profile
      tags:
      - Profile
  /quote:
    get:
      consumes:
      - application/json
      description: This endpoint retrieves quotes. Admins can retrieve all quotes,
        while other users can only retrieve approved quotes.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: A list of quotes.
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/quote.Quote'
              type: array
            type: object
        "401":
          description: '{\"error\":\"Unauthorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{\"error\":\"Quote not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"Failed to get quote\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get quotes
      tags:
      - Quote
  /quote/{profile-id}:
    get:
      consumes:
      - application/json
      description: Retrieve quotes by user ID
      parameters:
      - description: JWT token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: profile-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of quotes
          schema:
            items:
              $ref: '#/definitions/quote.Quote'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Quote not found
          schema:
            type: string
        "500":
          description: Failed to get quote
          schema:
            type: string
      summary: Get quotes by user ID
      tags:
      - quote
  /quote/create:
    post:
      consumes:
      - application/json
      description: This endpoint allows a user to submit a new quote.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The quote to be submitted.
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/quote.QuoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: '{\"message\":\"Quote created successfully\", \"quote\":\"Example
            quote text\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"Invalid request body\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{\"error\":\"Unauthorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"Failed to create quote\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new quote
      tags:
      - Quote
  /quote/delete/{id}:
    delete:
      consumes:
      - application/json
      description: This endpoint allows a user to delete an existing quote. Admins
        can delete any quote.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The ID of the quote to be deleted.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: '{\"message\":\"Quote deleted successfully\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"Failed to delete quote\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{\"error\":\"Unauthorized access\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: '{\"error\":\"not authorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{\"error\":\"Quote not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete an existing quote
      tags:
      - Quote
  /quote/update:
    put:
      consumes:
      - application/json
      description: This endpoint allows a user to update an existing quote. Admins
        can update any quote.
      parameters:
      - description: ID token
        in: header
        name: Authorization
        required: true
        type: string
      - description: The ID of the quote to be updated.
        in: path
        name: id
        required: true
        type: string
      - description: The updated quote text.
        in: body
        name: quote
        required: true
        schema:
          $ref: '#/definitions/quote.QuoteUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{\"message\":\"Quote updated successfully\", \"quote\":\"Updated
            quote text\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{\"error\":\"Invalid request body\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{\"error\":\"Unauthorized access\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: '{\"error\":\"not authorized\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{\"error\":\"Quote not found\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{\"error\":\"Failed to update quote\"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update an existing quote
      tags:
      - Quote
swagger: "2.0"
